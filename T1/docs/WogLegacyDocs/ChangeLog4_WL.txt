Changelog AFTER Alpha 8.0, by WoG Legacy Team

New syntax for receiver BA
	!!BA:B#/1;
		$ - string, z-var or ^^ constant
		1 - dummy parameter, but must be present

New command for receiver UX
	!!UX:D#/...;
		# - string, z-var or ^^ constant. Maximum size: 256 chars.
		... - you can add any variables/values here to be displayed
UX:D allows to display error message using internal tools. Might be useful for debugging. Works with UN:P904 and UN:P905

!!CR#1:
	#1 - index (type) of Curse/Bless (1..100)
	if command doesn't use index, you can omit
:P$; Picture of Curse
	$ - get/set picture path, might be zvar or ^^ constant
	Limit of characters: 64
	Path is relative to main directory of Heroes 3. All 3.58f curses are 44x44 pixels BMP files
:D$; Description of Curse
	$ - get/set description, might be zvar or ^^ constant
	Limit of characters: 256
:B#1/#2/$; Get/set hardcoded "Cannot visit an object on the map"
	#1 - object type
	#2 - object subtype
	$ = 0 means visiting object enabled
	$ = 1 means visiting object disabled (cannot visit)
	One curse might forbid entrance to multiple objects
:F?$; Find free "type" of curse
	$ - index (type) get-only
	-1 if not found
:X#1/#2; Log curse data
	#1 - string, name of file to log
	#2 - skip empty entries (1) or log everything (0)
	this one won't be used by anybody anymore, probably
All changes are saved in savefile, but are NOT send to remote PC during combat. So if you want to make curse matter in combat, beware that HE:Y might NOT show correct value on remote PC. Using HE-10 or HE-20 will NOT help here. You have to send data using IP receiver.

Curse support expanded once again. Now you can add custom curses/blesses as rewards/penalty for Sphinx riddle.
Additionally this serves as unified way to create "blesses" and "curses" pool.
CR:R#1/?$2/?$3; Get random curse/bless
	#1 - bless (1) or curse (0) pool
	$2 - index (type) of curse/bless
	$3 - (optional) randomly chosen Value (Power) of curse/bless
CR#1:S#2/?$; Check if curse of given index (type) is within pool
	#1 - curse type
	#2 - bless (1) or curse (0) pool
	$ - present (1) or not (0)
	This allows you to check whether given cursetype is indeed curse, or bless. Actually can be both :)
CR#1:S#2/?$3/?$4/?$5; Check if curse of given index (type) is within pool - Extended syntax
	#1 - curse type
	#2 - bless (1) or curse (0) pool
	$3 - present (1) or not
	$4 - minimal value
	$5 - maximum value
	Note that if parameter $3=0 (curse isn't in this pool) $4 and $5 are undefined (should be 0, but remember to check nonetheless)
CR#1:S#2/0; Exclude from curse pool
	#1 - curse type
	#2 - bless (1) or curse (0) pool
	This way you can remove curse from given pool, making it unavailable for CR:R and Sphinx.
	You can't remove all curses from either pool - there always must be atleast 1.
CR#1:S#2/1/#3/#4; Add to pool
	#1 - curse type
	#2 - bless (1) or curse (0) pool
	#3 - minimum value
	#4 - maximum value
	Makes curse available for CR:R and Sphinx. 
	Min/max values is range of Power Value for curse. Sphinx loss value from that rande, aswell as CR:R.
You can try to remove curse from pool it doesn't belong to - it's ignored.
If you add curse to pool it's already in, it doesn't create new entry but overrides previous one

!!MK#1/#2/#3 = Black market receiver
	#1,#2,#3 - x/y/l, also support indirect syntax
:A#1/$; Get/set artifact in slots
	#1 - slot (0..6)
	$ - set/get artifact (Format A1)
:I$; Get/set index of Black Market's pool
	$ - index (0 up to Number of Black Markets on Map - 1)
	You can setup multiple Black Markets to use same pool of artifacts - buying artifact in one will make it unavailable in other one aswell.
	Technically it's same as OB:C, except it secures type (doesn't work if type <> 7) and index value ( 0 <= index <= number_of_artifacts-1 )

!!VA#: Store data in named memory slots
	# - mode
	# = 0 slots are stored in savefile, and are local for map
	# = 1 slots are local for map, but not stored in savefile (temporary slots)
	# = 2 slots are stored in savefile and are NOT local for map. Prime functionality: passing values from one campaign map to another
:I#1/#2; Initialise variable
	#1 - name (string, up to 32 characters)
	#2 - type (0=v-var, 1=z-var)
	Initialising variable that already exist (has same 'mode' and 'name') cause ERM error.
:A#/$; Access variable
	# - name (string, up to 32 characters)
	$ - get/set value
	Accessing variable that doesn't exist cause ERM error.
:C#/?$; Check whether variable exists
	# - name (string, up to 32 characters)
	?$ - exist (1) or doesn't (0)
:C#/?$1/?$2; Check whether variable exists - extended syntax
	# - name (string, up to 32 characters)
	?$1 - exist (1) or doesn't (0)
	?$2 - type (0=v-var, 1=z-var, -1 if doesn't exist)
You can have variables with the same name in different "modes" - those are distinguished.
Variables in mode 2 are cleared ONLY when game is turned off.

[+] Scout Curse (type=8) now supports other values. You can temporarily set hero scouting radius by using this curse. For backcompability (and safety) 0 and negative values are interpreted as 2.
[+] In Lua/ERM you can use ".pre" ".firstpre" ".post" instead of ".?" ".first?" ".$".
[+] In Lua/ERM trigger type (pre, firstpost) letter case no longer matters. You can use "FirstPost", or "FiRsTpOsT".
[-+] AI:M and AI:W, when used with base value, accepts ONLY get syntax. 
[+] MR:N displays error when used with set syntax. 
[+] BG:Q displays error when used with set syntax
[+] Logs moved to woglogs/ folder. It's created automatically by exec at setup
[+] We have now LuaLog, WOGERMLOG, WOGVARLOG, WOGCRASHLOG and WOGCRASHDUMP. A lot, but it makes sense.
[+] Added struct that's automatically saved to (and loaded from) savefile. Proven to work in singleplayer, doesn't know if it works in multi. 
[+] Many Lua/ERM errors are managed by C code and doesn't cause crash. Additionally allows me to immediately show argument and parameter values. 
[ ] Curses separated from herospec.
[ ] I kinda don't understand purpose of h3std, so i've moved everything to h3wog EXCEPT txt files. So all text files can be put in h3std for easier translation,
[ ] Old saves will NOT work.

Self-caused bugs
[-] options.lua was scrapping Wog Options. Fixed, but you need to manually change constant value in both C++ header and Lua file.

Found bugs:
[-] When using Lua/ERM, post triggers ($) cause error with _NOGLOBALS macro. I believe game mistake them as macros. Not fixed, but i have added .pre and .post syntax - those works. For example, now you can use OB(11).pre = function() 
[-+] When using Lua/ERM, BA:B(string) is broken. Not fixed, instead used StrMan::Apply in extended syntax - that does work well
[-+] Lua/ERM errors can cause segmentation fault, due to accessing EAX=0x03. Replacing those errors with ERM errors fixes that.
Not-fixed bugs
[ ] Using BA:B - no matter, old or new syntax - while using HD Mod opens a terminal with filename. Closing this terminal closes the game aswell. Not fixed
[ ] WoG options - at least, the hardcoded ones - are scrapped when starting WoG map. On other maps works fine. Not fixed
[ ] Dumping values can cause game crash (to be precise: loop responsible for ERM traceback causes crash) Commented both traceback loops.